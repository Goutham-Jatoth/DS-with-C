1) Simplest  KMP ( Algorithm)

#include <stdio.h>
#include <string.h>

void computeLPS(char* p, int m, int* lps) {
    int len = 0, i = 1;
    lps[0] = 0;
    while(i < m) {
        if(p[i] == p[len]) {
            len++; lps[i++] = len;
        } else {
            if(len) len = lps[len-1];
            else lps[i++] = 0;
        }
    }
}

void KMP(char* txt, char* pat) {
    int n = strlen(txt), m = strlen(pat);
    int lps[m];
    computeLPS(pat, m, lps);
    int i=0, j=0;
    while(i < n) {
        if(txt[i] == pat[j]) { i++; j++; }
        if(j == m) {
            printf("Found at %d\n", i-j);
            j = lps[j-1];
        } else if(i < n && txt[i] != pat[j]) {
            if(j) j = lps[j-1];
            else i++;
        }
    }
}

int main() {
    char txt[100], pat[100];
    scanf("%s %s", txt, pat);
    KMP(txt, pat);
    return 0;
}



2) Boyer Moore

#include <stdio.h>
#include <string.h>

#define CHAR 256

void badChar(char* pat, int m, int badc[CHAR]) {
    for(int i=0;i<CHAR;i++) badc[i] = -1;
    for(int i=0;i<m;i++) badc[(int)pat[i]] = i;
}

void BM(char* txt, char* pat) {
    int n = strlen(txt), m = strlen(pat), badc[CHAR];
    badChar(pat,m,badc);
    int s=0;
    while(s <= n - m) {
        int j = m-1;
        while(j>=0 && pat[j] == txt[s+j]) j--;
        if(j<0) {
            printf("Found at %d\n", s);
            s += (s+m<n) ? m - badc[txt[s+m]] : 1;
        } else {
            int shift = j - badc[txt[s+j]];
            s += (shift>0)?shift:1;
        }
    }
}

int main() {
    char txt[100], pat[100];
    scanf("%s %s", txt, pat);
    BM(txt, pat);
    return 0;
}
