#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int visited[MAX];
int queue[MAX];
int front = 0, rear = -1;

// Enqueue for BFS
void enqueue(int v) {
    queue[++rear] = v;
}

// Dequeue for BFS
int dequeue() {
    return queue[front++];
}

// Graph represented as adjacency matrix
int graph[MAX][MAX];
int n;  // number of vertices

// DFS (recursive)
void DFS(int v) {
    printf("%d ", v);
    visited[v] = 1;

    for (int i = 0; i < n; i++) {
        if (graph[v][i] == 1 && !visited[i]) {
            DFS(i);
        }
    }
}

// BFS (iterative)
void BFS(int start) {
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    enqueue(start);
    visited[start] = 1;

    while (front <= rear) {
        int v = dequeue();
        printf("%d ", v);

        for (int i = 0; i < n; i++) {
            if (graph[v][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int edges, u, v;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    // Initialize adjacency matrix
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = 0;

    printf("Enter edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        // For undirected graph
        graph[u][v] = 1;
        graph[v][u] = 1;
    }

    // DFS traversal
    for (int i = 0; i < n; i++)
        visited[i] = 0;
    printf("DFS starting from vertex 0: ");
    DFS(0);
    printf("\n");

    // BFS traversal
    printf("BFS starting from vertex 0: ");
    BFS(0);
    printf("\n");

    return 0;
}
