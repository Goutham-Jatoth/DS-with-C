1) Quick Sort

#include <stdio.h>

int main() {
    int arr[100], n, i, j, pivot, temp, low, high, pi, stack[100], top = -1;

    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    // Manual stack-based quick sort without recursion
    stack[++top] = 0;
    stack[++top] = n - 1;

    while (top >= 0) {
        high = stack[top--];
        low = stack[top--];

        pivot = arr[high];
        i = low - 1;

        for (j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;
            }
        }

        temp = arr[i + 1]; arr[i + 1] = arr[high]; arr[high] = temp;
        pi = i + 1;

        if (pi - 1 > low) {
            stack[++top] = low;
            stack[++top] = pi - 1;
        }

        if (pi + 1 < high) {
            stack[++top] = pi + 1;
            stack[++top] = high;
        }
    }

    printf("Sorted array (Quick Sort): ");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);

    return 0;
}



2)  Heap sort

#include <stdio.h>

int main() {
    int arr[100], n, i, j, temp;

    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    // Build Max Heap
    for (i = n / 2 - 1; i >= 0; i--) {
        int parent = i;
        while (2 * parent + 1 < n) {
            int left = 2 * parent + 1;
            int right = 2 * parent + 2;
            int largest = parent;

            if (left < n && arr[left] > arr[largest])
                largest = left;
            if (right < n && arr[right] > arr[largest])
                largest = right;

            if (largest != parent) {
                temp = arr[parent]; arr[parent] = arr[largest]; arr[largest] = temp;
                parent = largest;
            } else {
                break;
            }
        }
    }

    // Extract elements from heap
    for (i = n - 1; i >= 0; i--) {
        temp = arr[0]; arr[0] = arr[i]; arr[i] = temp;

        int parent = 0;
        while (2 * parent + 1 < i) {
            int left = 2 * parent + 1;
            int right = 2 * parent + 2;
            int largest = parent;

            if (left < i && arr[left] > arr[largest])
                largest = left;
            if (right < i && arr[right] > arr[largest])
                largest = right;

            if (largest != parent) {
                temp = arr[parent]; arr[parent] = arr[largest]; arr[largest] = temp;
                parent = largest;
            } else {
                break;
            }
        }
    }

    printf("Sorted array (Heap Sort): ");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);

    return 0;
}


3) Merge sort

#include <stdio.h>

int main() {
    int arr[100], temp[100];
    int n, i, width, left, mid, right, k;

    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    for (width = 1; width < n; width *= 2) {
        for (left = 0; left < n; left += 2 * width) {
            mid = left + width;
            right = left + 2 * width;
            if (mid > n) mid = n;
            if (right > n) right = n;

            int i = left, j = mid, k = left;

            while (i < mid && j < right) {
                if (arr[i] <= arr[j])
                    temp[k++] = arr[i++];
                else
                    temp[k++] = arr[j++];
            }

            while (i < mid)
                temp[k++] = arr[i++];
            while (j < right)
                temp[k++] = arr[j++];
        }

        for (i = 0; i < n; i++)
            arr[i] = temp[i];
    }

    printf("Sorted array (Merge Sort): ");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);

    return 0;
}
